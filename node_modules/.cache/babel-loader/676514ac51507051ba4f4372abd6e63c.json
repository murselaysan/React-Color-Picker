{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\murse\\\\Desktop\\\\Bootcamp\\\\react-color-picker\\\\src\\\\ColorPicker.js\";\nimport React from 'react';\nimport { Button } from './Button';\n\nclass ColorPicker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.applyColor = () => {\n      const color = this.formatColor(this.state.color);\n      document.body.style.backgroundColor = color; // document.querySelector('p').style.color = color;   // just for trying\n    };\n\n    this.chooseColor = () => {\n      const randomColorArr = [];\n\n      for (let i = 0; i < 3; i++) {\n        randomColorArr.push(Math.floor(Math.random() * 256));\n      }\n\n      this.setState({\n        color: randomColorArr\n      }); //this.applyColor();\n    };\n\n    this.state = {\n      color: [142, 23, 152]\n    };\n  }\n\n  componentDidMount() {\n    console.log('i invoked immediately after component is mounted, just one time at the beginning; after render method');\n    this.applyColor(); //this.chooseColor(); //just for testing\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('i invoked immediately after updating occurs, upon every change.');\n    this.applyColor();\n  }\n\n  isLight(colorArr) {\n    return colorArr.reduce((a, b) => a + b) < 127 * 3; // it returns true or false;\n  }\n\n  formatColor(colorArr) {\n    return 'rgb(' + colorArr.join(', ') + ')';\n  }\n\n  render() {\n    //this.applyColor();  // first option\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: this.isLight(this.state.color) ? \"black\" : \"white\",\n        children: [\"Your color is \", this.formatColor(this.state.color), \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        chooseColor: this.chooseColor,\n        isLight: this.isLight(this.state.color),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Hi, im color picker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ColorPicker;","map":{"version":3,"sources":["C:/Users/murse/Desktop/Bootcamp/react-color-picker/src/ColorPicker.js"],"names":["React","Button","ColorPicker","Component","constructor","props","applyColor","color","formatColor","state","document","body","style","backgroundColor","chooseColor","randomColorArr","i","push","Math","floor","random","setState","componentDidMount","console","log","componentDidUpdate","prevProps","prevState","isLight","colorArr","reduce","a","b","join","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,UAAvB;;AAEA,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA4BnBC,UA5BmB,GA4BR,MAAI;AACb,YAAMC,KAAK,GAAG,KAAKC,WAAL,CAAiB,KAAKC,KAAL,CAAWF,KAA5B,CAAd;AACAG,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAsCN,KAAtC,CAFa,CAGb;AACD,KAhCkB;;AAAA,SAkCpBO,WAlCoB,GAkCR,MAAI;AACd,YAAMC,cAAc,GAAG,EAAvB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC3BD,QAAAA,cAAc,CAACE,IAAf,CAAoBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAApB;AACD;;AACD,WAAKC,QAAL,CAAc;AACZd,QAAAA,KAAK,EAACQ;AADM,OAAd,EALe,CAQf;AACD,KA3CoB;;AAGjB,SAAKN,KAAL,GAAa;AACVF,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAK,EAAL,EAAQ,GAAR;AADG,KAAb;AAGD;;AAGDe,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,uGAAZ;AACA,SAAKlB,UAAL,GAFkB,CAGlB;AACD;;AAEDmB,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvCJ,IAAAA,OAAO,CAACC,GAAR,CAAY,iEAAZ;AACA,SAAKlB,UAAL;AACD;;AAEDsB,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,WAAOA,QAAQ,CAACC,MAAT,CAAgB,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,GAACC,CAA3B,IAAgC,MAAM,CAA7C,CADgB,CACgC;AACjD;;AAEDxB,EAAAA,WAAW,CAACqB,QAAD,EAAW;AACpB,WAAO,SAASA,QAAQ,CAACI,IAAT,CAAc,IAAd,CAAT,GAA+B,GAAtC;AACD;;AAoBDC,EAAAA,MAAM,GAAG;AACP;AACA,wBACE;AAAA,8BACE;AAAI,QAAA,SAAS,EAAE,KAAKN,OAAL,CAAa,KAAKnB,KAAL,CAAWF,KAAxB,IAAgC,OAAhC,GAA0C,OAAzD;AAAA,qCACe,KAAKC,WAAL,CAAiB,KAAKC,KAAL,CAAWF,KAA5B,CADf;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,MAAD;AAAQ,QAAA,WAAW,EAAE,KAAKO,WAA1B;AAAuC,QAAA,OAAO,EAAE,KAAKc,OAAL,CAAa,KAAKnB,KAAL,CAAWF,KAAxB,CAAhD;AAAA,+BAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AA7DuC;;AAgE1C,eAAeL,WAAf","sourcesContent":["import React from 'react';\nimport { Button } from './Button';\n\nclass ColorPicker extends React.Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       color: [142,23,152]\n    }\n  }\n  \n\n  componentDidMount() {\n    console.log('i invoked immediately after component is mounted, just one time at the beginning; after render method')\n    this.applyColor();\n    //this.chooseColor(); //just for testing\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    console.log('i invoked immediately after updating occurs, upon every change.')\n    this.applyColor();\n  }\n\n  isLight(colorArr) {\n    return colorArr.reduce((a,b) => a+b) < 127 * 3; // it returns true or false;\n  }\n\n  formatColor(colorArr) {\n    return 'rgb(' + colorArr.join(', ') + ')'; \n  }\n\n  applyColor=()=>{\n    const color = this.formatColor(this.state.color);\n    document.body.style.backgroundColor = color;\n    // document.querySelector('p').style.color = color;   // just for trying\n  }\n\n chooseColor=()=>{\n   const randomColorArr = [];\n   for (let i = 0; i < 3; i++) {\n    randomColorArr.push(Math.floor(Math.random()*256));\n  }\n  this.setState({\n    color:randomColorArr\n  });\n  //this.applyColor();\n}\n\n\n  render() {\n    //this.applyColor();  // first option\n    return (\n      <div>\n        <h1 className={this.isLight(this.state.color)? \"black\" : \"white\"}>\n        Your color is {this.formatColor(this.state.color)}!\n        </h1>\n        {/* <button onClick={this.applyColor}>Change Color</button> // second option   */}\n        <Button chooseColor={this.chooseColor} isLight={this.isLight(this.state.color)}>\n        {/* <Button chooseColor={this.chooseColor}> */}\n          <p>Hi, im color picker</p>\n        </Button>\n      </div> \n    );\n  }\n}\n\nexport default ColorPicker;\n"]},"metadata":{},"sourceType":"module"}